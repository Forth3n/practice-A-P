import os
import logging
import io
import datetime
import requests
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from deep_translator import GoogleTranslator
import app.database as db
import app.keyboards as kb
import app.requests as rq

log_dir = 'logs'
report_dir = 'reports'
os.makedirs(log_dir, exist_ok=True)
os.makedirs(report_dir, exist_ok=True)

log_file_path = os.path.join(log_dir, 'handlers.log')
html_report_path = os.path.join(report_dir, 'report.html')
final_html_report_path = os.path.join(report_dir, 'final_report.html')

class HTMLHandler(logging.Handler):
    def __init__(self, filename):
        super().__init__()
        self.filename = filename

    def emit(self, record):
        try:
            log_entry = self.format(record)
            with io.open(self.filename, 'a', encoding='utf-8') as f:
                f.write(log_entry + "<br>\n")
        except Exception:
            self.handleError(record)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

log_handler = logging.FileHandler(log_file_path, encoding='utf-8')
log_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
logger.addHandler(log_handler)

html_handler = HTMLHandler(html_report_path)
html_handler.setFormatter(logging.Formatter('<b>%(asctime)s</b> [%(levelname)s] %(message)s'))
logger.addHandler(html_handler)

def generate_html_report():
    try:
        with io.open(html_report_path, 'r', encoding='utf-8') as log_file:
            log_entries = log_file.readlines()

        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ª–æ–≥–æ–≤</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            padding: 20px;
        }}
        h1 {{
            color: #333;
        }}
        .log {{
            background-color: #fff;
            border: 1px solid #ccc;
            padding: 10px;
            line-height: 1.6;
        }}
        .INFO {{ color: green; }}
        .ERROR {{ color: red; }}
        .WARNING {{ color: orange; }}
        .DEBUG {{ color: gray; }}
    </style>
</head>
<body>
    <h1>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ª–æ–≥–æ–≤</h1>
    <div class="log">
        {''.join(log_entries)}
    </div>
</body>
</html>"""

        with io.open(final_html_report_path, 'w', encoding='utf-8') as html_file:
            html_file.write(html_content)

        logger.info(f"HTML-–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {final_html_report_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ HTML-–æ—Ç—á—ë—Ç–∞: {e}")


router = Router()
API = "ijx15Q1EWw2iAn8lBuH6S2wdZRH5yLXE"

class HolidayDate(StatesGroup):
    waiting_for_date = State()
    waiting_for_custom_date = State()
    waiting_for_custom_name = State()


db.create_db()

def get_holidays_by_date(date: datetime.date, country_code='KZ'):
    url = "https://calendarific.com/api/v2/holidays"
    params = {
        "api_key": API,
        "country": country_code,
        "year": date.year,
        "month": date.month,
        "day": date.day
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        return data.get("response", {}).get("holidays", [])
    except (requests.RequestException, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
        return None

def translate_to_russian(text: str) -> str:
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def create_delete_holiday_keyboard(holidays):
    buttons = []

    for holiday in holidays:
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå {holiday[0]}",
                callback_data=f"delete_holiday_{holiday[0]}"
            )
        ])

    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="add_personal_holiday"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all_holidays")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(CommandStart())
async def cmd_start(message: Message):
    rq.add_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.username})")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=kb.main)

@router.message(F.text == "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫?")
async def cmd_today(message: Message):
    today = datetime.date.today()
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç {message.from_user.id} ‚Äî {today}")
    holidays = get_holidays_by_date(today)
    if holidays is None:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif holidays:
        text = f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) –æ—Ç–º–µ—á–∞—é—Ç—Å—è:\n\n"
        for h in holidays:
            text += f"üéâ {translate_to_russian(h['name'])}\n"
    else:
        text = f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤."
    await message.answer(text, reply_markup=kb.choose_date)

@router.callback_query(F.data == "choose_another_date")
async def cb_pick_another_date(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –≤–≤–æ–¥ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–¥–¥.–º–º.–≥–≥–≥–≥**:")
    await state.set_state(HolidayDate.waiting_for_date)
    await callback.answer()

@router.message(HolidayDate.waiting_for_date)
async def process_custom_date(message: Message, state: FSMContext):
    try:
        date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É: {date}")
    except ValueError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É: {message.text}")
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: –¥–¥.–º–º.–≥–≥–≥–≥")
        return
    holidays = get_holidays_by_date(date)
    if holidays is None:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif holidays:
        text = f"–ù–∞ {date.strftime('%d.%m.%Y')} –æ—Ç–º–µ—á–∞—é—Ç—Å—è:\n\n"
        for h in holidays:
            text += f"üéâ {translate_to_russian(h['name'])}\n"
    else:
        text = f"–ù–∞ {date.strftime('%d.%m.%Y')} –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤."
    await message.answer(text, reply_markup=kb.choose_date)
    await state.clear()

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def cmd_personal_calendar(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    holidays = rq.get_personal_holidays(message.from_user.id)
    if holidays:
        text = "–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n\n"
        for holiday in holidays:
            text += f"üéâ {holiday[0]} ‚Äî {holiday[1]}\n"
        keyboard = create_delete_holiday_keyboard(holidays)
    else:
        text = "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏."
        keyboard = kb.personal_calendar_kb
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "add_personal_holiday")
async def add_personal_holiday(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
    await state.set_state(HolidayDate.waiting_for_custom_date)
    await callback.answer()

@router.message(HolidayDate.waiting_for_custom_date)
async def handle_personal_date(message: Message, state: FSMContext):
    try:
        date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –¥–∞—Ç—É –ª–∏—á–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: {date}")
    except ValueError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É: {message.text}")
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –¥–¥.–º–º.–≥–≥–≥–≥")
        return
    await state.update_data(holiday_date=date)
    await state.set_state(HolidayDate.waiting_for_custom_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞:")

@router.message(HolidayDate.waiting_for_custom_name)
async def handle_personal_name(message: Message, state: FSMContext):
    holiday_name = message.text
    user_data = await state.get_data()
    holiday_date = user_data['holiday_date']
    rq.add_personal_holiday(message.from_user.id, holiday_name, holiday_date)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–∞–∑–¥–Ω–∏–∫ '{holiday_name}' ({holiday_date})")
    await message.answer(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ '{holiday_name}' –Ω–∞ {holiday_date.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

@router.callback_query(F.data.startswith("delete_holiday_"))
async def delete_personal_holiday(callback: CallbackQuery):
    holiday_name = callback.data.split("_", 2)[2]
    rq.delete_personal_holiday(callback.from_user.id, holiday_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª –ª–∏—á–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫ '{holiday_name}'")

    holidays = rq.get_personal_holidays(callback.from_user.id)
    if holidays:
        text = "–ü—Ä–∞–∑–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω. –í–∞—à–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–∏—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n\n"
        for holiday in holidays:
            text += f"üéâ {holiday[0]} ‚Äî {holiday[1]}\n"
        keyboard = create_delete_holiday_keyboard(holidays)
    else:
        text = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏."
        keyboard = kb.personal_calendar_kb

    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "delete_all_holidays")
async def confirm_delete_all_personal_holidays(callback: CallbackQuery):
    rq.delete_all_personal_holidays(callback.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª –≤—Å–µ –ª–∏—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
    await callback.message.answer("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—á–∏—â–µ–Ω.")
    await cmd_personal_calendar(callback.message)


generate_html_report()
